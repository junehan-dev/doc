gRPC와 HTTP/2
^^^^^^^^^^^^^


기존의 HTTP는 문자열기반 *application/octet-stream*\, 8비트 단위로 최소 의미를 지니는 데이터라는 의미입니다.

HTTP/2의 가장 큰 변화는 텍스트기반 프로토콜에서 바이너리 기반 프로토콜로 변화했다는 점 입니다. 아마 위 내용과의 차이가 있지 않을까 생각하게 됩니다.

가장 흔한 사용 시나리오는 서비스들을 microservices 스타일 아키텍쳐로 배치하고 그들을 연결할 때 사용하거나, 모바일 디바이스 client를 backend서비스로 연결할 때 사용합니다.

gRPC의 복합적인 HTTP/2의 사용은 gRPG 클라이언트를 브라우저에서 구현할 수 없도록 만들었습니다만,
대신 gRPC-web proxy를 사용하여 브라우저가 이해할 수 있도록 방법이 content-type에 대해 분산하여 응답을 받는 것으로 브라우저 상에서 해석 가능한 프로토콜이 되었습니다.

.. image:: https://grpc.io/img/grpc-web-proxy.png

.. todo::

   gRPC를 이해하기 위해선 HTTP2와 그 중심에 있는 SPRD등의 즉 google이 proposal해서 수용된 것들에 대해 이해가 선행됩니다. RABBIT HOLE이다~ 돔황챠!

기존의 RPC가 일반 http1.1를 데이터 프로토콜로 사용하고 있었고 서버와도 http1.1로 통신하고 있었으나,
gRPC는 2.0강제하고, 1회의 통신으로 종료되는 개념이 아닌 것으로 보입니다.
하지만 브라우저에서 문제가 되었었던 것이고 지금은 프록시 서버가 gRPC서버와 대리하여 통신을 처리해주기 때문에 현재는 브라우저상에서도 지원하고 있습니다.
복합적인 http2.0을 사용한다는 차이가 있긴 하지만, gRPC로 통신하는 서버에서 동작하는 프로세스가 URI를 통해서, Application Feature를 Map해놓은 자체로 API라고 부를 수 있기 때문에, API라고 부를 수 있습니다.
